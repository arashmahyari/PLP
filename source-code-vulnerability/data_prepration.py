# -*- coding: utf-8 -*-
"""
Created on Fri Sep 10 14:28:06 2021

@author: arash
"""
import numpy as np
import pickle
import torch
from torch.utils.data import TensorDataset
from torch.nn.utils.rnn import pad_packed_sequence, pad_sequence



vocab, index_word=pickle.load(open('vocab.p','rb'))
X=pickle.load(open('training_processed_LLVM.p','rb'))

N=len(vocab)

print(len(X))
senten = []

a_max=6444 #max length=6444

i=0
data=[]
count=0
label=[]
for x in X:
    #print(i)
    
    
    sent=x[1]
    temp=[]
    if len(sent)<6444:
        l=6444-len(sent)
        temp=[np.zeros((N,))]*l
    
    for s in sent:
        a=np.zeros((N,))
        ss=s.split(' ')
        for y in ss:
            a[int(vocab[y])]=1.0
        temp.append(a) 
    
          
        
    data.append(temp)
    label.append([x[0]])
    print(i)
    if i==128:
        d=torch.Tensor(data)
        L=torch.Tensor(label)
        print('befoe F')
        F=TensorDataset(d,L)
        print('after F')       
        torch.save(F, 'data' + str(count) + '.pt')
        print('save')
        data=[]
        label=[]
        i=0
        print(count)
        count=count+1
    else:
        i=i+1
        
    
D=torch.Tensor(data)
L=torch.Tensor(label)
F=TensorDataset(D,L)
torch.save(F, 'data' + str(count) + '.pt')    
        
        





